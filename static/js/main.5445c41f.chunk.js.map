{"version":3,"sources":["firebaseUsersLocation.js","WeatherData.js","Header.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","WeatherData","className","id","this","props","weatherLoc","currentWeathCondition","currentWeath","temp_c","humidity","windText","wind_kph","precipText","precip_mm","pressure_in","onClick","firebaseAddFunc","Component","Header","scrollFunc","App","handleInputChange","e","setState","userInput","target","value","charAt","toUpperCase","slice","handleSubmit","preventDefault","callWeatherAPI","state","callUnsplashImgAPI","city","axios","method","url","dataResponse","params","key","q","then","apiData","filterWeatherData","data","document","getElementById","style","display","catch","err","console","log","alert","origWeatherData","currentApiData","current","weatherLocationFullName","location","name","country","currentCondition","condition","text","currentWindSpeed","currentPrecip","weatherLocation","currentWeatherData","currentConditionData","client_id","query","orientation","weatherLocationBgSrc","results","urls","regular","weatherLocationBg","backgroundImage","scrollToWeather","weatherSection","scrollIntoView","behavior","removeLocation","locId","database","ref","child","remove","storeLocation","dbRef","locationTextArray","locations","forEach","element","push","indexOf","loadPreviousCity","weatherRange","storeUserLocationFB","on","firebaseDataObj","val","locationArray","propertyKey","formattedObj","el","onSubmit","htmlFor","type","placeholder","onChange","bgSrc","map","loc","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5445c41f.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/database\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAzgD0kXpjPIfhvWKOTTAPmM6nUKUH4tNI\",\r\n    authDomain: \"ben-sarjeant-project-5.firebaseapp.com\",\r\n    databaseURL: \"https://ben-sarjeant-project-5.firebaseio.com\",\r\n    projectId: \"ben-sarjeant-project-5\",\r\n    storageBucket: \"ben-sarjeant-project-5.appspot.com\",\r\n    messagingSenderId: \"294499551721\",\r\n    appId: \"1:294499551721:web:5cbbb09952bf2f8b72e378\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","import { Component } from 'react';\r\n\r\nclass WeatherData extends Component {\r\n    \r\n    render() { \r\n        // const WeatherBackground = ({ bgSrc })\r\n        return (\r\n            <div className=\"weatherDataContainer\" id=\"weatherDataContainer\">\r\n            <h2>{this.props.weatherLoc}</h2>\r\n            <h3>{this.props.currentWeathCondition} | {this.props.currentWeath.temp_c}Â°C </h3>\r\n            <p>Humidity: {this.props.currentWeath.humidity}</p>\r\n            <p>Wind (kph): {this.props.currentWeath.windText}, {this.props.currentWeath.wind_kph}kph</p>\r\n            <p>Precipitation: {this.props.currentWeath.precipText}, {this.props.currentWeath.precip_mm}mm</p>\r\n            <p>Pressure: {this.props.currentWeath.pressure_in}</p>       \r\n            <button className=\"\">See Five Day Forcast</button>\r\n            <button onClick={this.props.firebaseAddFunc}>Save Location for Future Use</button> \r\n        </div> \r\n\r\n\r\n        )\r\n    }\r\n}\r\nexport default WeatherData; ","import { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n    render() { \r\n        return (\r\n            <header>\r\n                <div className=\"wrapper headerFlexChild\">\r\n                    <h1>Check out some weather!</h1>\r\n                    <i onClick={() => { this.props.scrollFunc() }} className=\"fas fa-chevron-down chevron\"></i>\r\n                </div>\r\n            </header>\r\n        )\r\n    }\r\n}\r\nexport default Header;","import { Component, Fragment } from 'react';\nimport firebase from './firebaseUsersLocation.js';\nimport './App.js';\nimport axios from 'axios';\nimport WeatherData from './WeatherData.js';\nimport Header from './Header.js'\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      locations: [],\n      currentWeatherData: [],\n      weatherLocation: '',\n      userInput: '',\n      weatherRange: '',\n      weatherLocationBg: '', \n      currentConditionData: ''\n    }\n  }\n\n//   MVP\n//   1. Landing page welcoming user to site -- done \n//   2. Prompt user for location of choice, and range of forecast\n// 3. Show weather related to that location from third - party api based off prompt(Weather API)\n\n// Stretch\n// 1. Allow users to save location for future use\n// 2. Allow users view satellite imagery\n// 3. Allow users to see weather on mars for same range of forecast(NASA API)\n\n  componentDidMount() {\n    this.storeUserLocationFB();\n  }\n\n  handleInputChange = (e) => {\n    this.setState({\n      // converting user input to have a capitalized first letter\n      userInput: e.target.value.charAt(0).toUpperCase() + e.target.value.slice(1),\n    })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.callWeatherAPI(`${this.state.userInput}`);\n    this.callUnsplashImgAPI(`${this.state.userInput}`);\n  }\n\n  // Function to retrieve list of previously entered locations from Firebase\n  storeUserLocationFB() {\n    const dbRef = firebase.database().ref()\n \n    dbRef.on('value', (data) => {\n      const firebaseDataObj = data.val();\n\n      let locationArray = [];\n\n      for (let propertyKey in firebaseDataObj) {\n        const propertyVal = firebaseDataObj[propertyKey];\n        const formattedObj = {\n          id: propertyKey,\n          name: propertyVal\n        }\n        locationArray.push(formattedObj)\n      }\n\n      this.setState({\n        locations: locationArray,\n      })\n    })\n  }\n  // End of Firebase function\n  \n  // Calling weather api to retrieve weather data when user submits button\n  callWeatherAPI = (city) => {\n    const weatherKey = '29c5ceb051fc45c29ac204434202611';\n\n    axios({\n      method: 'GET',\n      url: 'https://api.weatherapi.com/v1/current.json',\n      dataResponse: 'json',\n      params: {\n        key: weatherKey,\n        q: city\n      }\n    }).then((apiData) => {\n\n      this.filterWeatherData(apiData.data);    \n      document.getElementById('weatherDataContainer').style.display = 'flex';\n\n    }).catch(err => {\n      console.log(err);\n      alert(\"No data for that city, please try again.\") \n    })\n  }\n\n  // Filtering weather data to add specific text\n  filterWeatherData = (origWeatherData) => {\n    console.log(\"original weather data\", origWeatherData);\n    let currentApiData = origWeatherData.current;\n    const weatherLocationCity = origWeatherData.location.name;\n    const weatherLocationCountry = origWeatherData.location.country;\n    const weatherLocationFullName = weatherLocationCity + ', ' + weatherLocationCountry;\n    const currentCondition = origWeatherData.current.condition.text;\n\n    let currentHumid = origWeatherData.current.humidity;\n    let currentWindSpeed = origWeatherData.current.wind_kph;\n    // const currentWindGust = origWeatherData.current.temp_c;\n    let currentPrecip = origWeatherData.current.precip_mm;\n    let currentPressure = origWeatherData.current.pressure_in;\n\n    //conditionals for humidity\n    // if (currentHumid >= 60) {\n    //   currentApiData = { ...currentApiData, humidText: \"Very windy - stay inside or you'll turn into a kite\" };\n    // } else if (currentHumid < 60 & currentHumid >= 40) {\n    //   currentApiData = { ...currentApiData, humidText: \"Windy - enjoy the strong winds\" };\n    // } else if (currentHumid < 40 & currentHumid >= 15) {\n    //   currentApiData = { ...currentApiData, humidText: \"Breezy - the perfect amount of breeze\" };\n    // } else {\n    //   currentApiData = { ...currentApiData, humidText: \"No wind right now\" }\n    // }\n\n    \n    //conditionals for wind speed\n    if (currentWindSpeed >= 60) {\n       currentApiData = {...currentApiData, windText: \"Very windy - stay inside or you'll turn into a kite\"};\n    } else if (currentWindSpeed < 60 & currentWindSpeed >= 40) {\n      currentApiData = { ...currentApiData, windText: \"Windy - enjoy the strong winds\"};\n    } else if (currentWindSpeed < 40 & currentWindSpeed >= 15) {\n      currentApiData = { ...currentApiData, windText: \"Breezy - the perfect amount of breeze\" };\n    } else {\n      currentApiData = {...currentApiData, windText: \"Hardly any wind right now\"}\n    }\n\n\n    // conditionals for precipitation \n    if (currentPrecip >= 20) {\n      currentApiData = {...currentApiData, precipText: \"It's raining cats and dogs - stay inside or you'll drown\"};\n    } else if (currentPrecip < 20 & currentPrecip >= 10) {\n      currentApiData = { ...currentApiData, precipText: \"It's pouring - wear that rain coat you don't own\"};\n    } else if (currentPrecip < 10 & currentPrecip >= 4) {\n      currentApiData = { ...currentApiData, precipText: \"It's raining - better bundle up\" };\n    } else if (currentPrecip < 4 & currentPrecip >= 0.1) {\n      currentApiData = { ...currentApiData, precipText: \"It's drizzling - at least it's not pouring\" };\n    } else {\n      currentApiData = {...currentApiData, precipText: \"No rain right now\"}\n    }\n\n  \n\n\n    this.setState({\n      weatherLocation: weatherLocationFullName,\n      currentWeatherData: currentApiData,\n      currentConditionData: currentCondition\n    });\n       \n\n  }\n\n\n  // Calling the unsplash API to retrieve a background photo based off of the users requested location\n  callUnsplashImgAPI = (city) => {\n    const unsplashPhotoKey = 'ZxjN4qAJgh0cJ5Lz2Lm47cXNiqzVZVZ69KLm5386GtM';\n\n    axios({\n      method: 'GET',\n      url: 'https://api.unsplash.com/search/photos',\n      dataResponse: 'json',\n      params: {\n        client_id: unsplashPhotoKey,\n        query: city,\n        orientation: 'landscape'\n      }\n    }).then((apiData) => {\n      const weatherLocationBgSrc = apiData.data.results[0].urls.regular\n      this.setState({\n        weatherLocationBg: weatherLocationBgSrc\n      })\n      document.getElementById('weatherSection').style.backgroundImage = `url(${this.state.weatherLocationBg})`;\n      \n    }).catch(err => {\n      console.log(err);\n    })\n  }\n  // End of unsplash api call\n\n  \n  // Function to scroll down to the next section - called from chevron click\n  scrollToWeather = () => {\n    this.weatherSection.scrollIntoView({ behavior: \"smooth\" });\n  }\n\n  removeLocation = (locId) => {\n    const dbRef = firebase.database().ref()\n    dbRef.child(locId).remove();\n  }\n\n  storeLocation = () => {\n    const dbRef = firebase.database().ref();\n    let locationTextArray = []\n    this.state.locations.forEach(element => {\n      locationTextArray.push(element.name)\n    });\n    const indexOf = locationTextArray.indexOf(this.state.userInput);\n    const userInputCity = this.state.userInput\n    if (indexOf >= 0) {\n      alert(\"This city is already a stored location!\")\n    } else {\n      dbRef.push(this.state.userInput)\n    }\n  }\n\n  loadPreviousCity = (e) => {\n    e.preventDefault();\n    this.setState({\n      userInput: e.target.text\n    })\n    this.callWeatherAPI(e.target.text);\n    this.callUnsplashImgAPI(e.target.text);\n  }\n\n\n  render() { \n    return (\n      <Fragment>\n        <Header scrollFunc={this.scrollToWeather} />\n        <section\n          className=\"weatherMain\"\n          id=\"weatherSection\"\n          ref={(el) => { this.weatherSection = el; }}>\n\n          <section className=\"requestedWeather\">\n            <form onSubmit={this.handleSubmit} className=\"weatherDataForm\">\n              <label htmlFor=\"userLocation\" className=\"srOnly\">location:</label>\n              <input\n                type=\"text\"\n                id=\"userLocation\"\n                name=\"userLocation\"\n                placeholder=\"Search for a city\"\n                onChange={this.handleInputChange}\n              />\n              <button>Find Weather</button>\n               \n            </form>\n               \n\n            <WeatherData\n              weatherLoc={this.state.weatherLocation}\n              currentWeathCondition={this.state.currentConditionData}\n              currentWeath={this.state.currentWeatherData}\n              bgSrc={this.state.weatherLocationBg}\n              firebaseAddFunc={this.storeLocation}\n            />\n\n            <div className=\"firebaseStoredLocations\">  \n              {\n                this.state.locations.map((loc) => {\n                  return (\n                    <li key={loc.id}>\n                      <a href=\"\" onClick={this.loadPreviousCity}>{loc.name}</a>\n                      <button className=\"removeButton\" onClick={() => { this.removeLocation(loc.id) }}>X</button>\n                    </li>\n                  )\n                })\n              }\n            </div>\n\n          </section>\n        </section>\n      </Fragment>       \n    )\n  }\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}