{"version":3,"sources":["firebaseUsersLocation.js","WeatherData.js","Header.js","Footer.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","WeatherData","className","id","this","props","weatherLoc","currentWeathCondition","currentWeath","temp_c","precipText","precip_mm","windText","wind_kph","humidText","humidity","onClick","firebaseAddFunc","weatherForecast","forecastData","map","dayObj","date","day","condition","text","maxtemp_c","mintemp_c","totalprecip_mm","date_epoch","Component","Header","scrollFunc","Footer","App","handleInputChange","e","setState","userInput","target","value","charAt","toUpperCase","slice","handleSubmit","preventDefault","callWeatherAPI","state","callUnsplashImgAPI","city","axios","method","url","dataResponse","params","key","q","days","then","apiData","filterWeatherData","data","document","getElementById","style","display","catch","err","alert","origWeatherData","forecastApiData","forecast","forecastday","weatherLocationFullName","location","name","country","currentCondition","current","currentApiData","currentHumid","currentWindSpeed","currentPrecip","weatherLocation","currentWeatherData","currentConditionData","forecastWeatherData","client_id","query","orientation","weatherLocationBg","results","urls","regular","backgroundImage","scrollToWeather","weatherSection","scrollIntoView","behavior","storeLocation","dbRef","database","ref","locationTextArray","locations","forEach","element","push","indexOf","removeLocation","locId","child","remove","loadPreviousCity","toggleWeatherForecast","textContent","storeUserLocationFB","on","firebaseDataObj","val","locationArray","propertyKey","formattedObj","el","onSubmit","htmlFor","type","placeholder","onChange","loc","href","bgSrc","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2e3322cb.chunk.js","sourcesContent":["// FIREBASE IMPORT\r\n// used to store the users inputted location for future use if they desire \r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/database\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAzgD0kXpjPIfhvWKOTTAPmM6nUKUH4tNI\",\r\n    authDomain: \"ben-sarjeant-project-5.firebaseapp.com\",\r\n    databaseURL: \"https://ben-sarjeant-project-5.firebaseio.com\",\r\n    projectId: \"ben-sarjeant-project-5\",\r\n    storageBucket: \"ben-sarjeant-project-5.appspot.com\",\r\n    messagingSenderId: \"294499551721\",\r\n    appId: \"1:294499551721:web:5cbbb09952bf2f8b72e378\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","// WeatherData class component\r\nimport { Component } from 'react';\r\nimport './App.css';\r\n\r\nclass WeatherData extends Component {\r\n    \r\n    render() { \r\n        return (\r\n            <div className=\"weatherDataContainer\" id=\"weatherDataContainer\">\r\n\r\n                {/* Setting the dom to reflect weather api data */}\r\n                <h2>{this.props.weatherLoc}</h2>\r\n                <h3>{this.props.currentWeathCondition} | {this.props.currentWeath.temp_c}°C </h3>\r\n                <p>Precipitation: {this.props.currentWeath.precipText} ({this.props.currentWeath.precip_mm}mm)</p>\r\n                <p>Wind: {this.props.currentWeath.windText} ({this.props.currentWeath.wind_kph}kph)</p>\r\n                <p>Humidity: {this.props.currentWeath.humidText} ({this.props.currentWeath.humidity}%)</p>    \r\n                \r\n                {/* Button used to fire storeLocation on click */}\r\n                <button className=\"saveLocationButton\" onClick={this.props.firebaseAddFunc}>Save Location</button> \r\n                \r\n                {/* Button to fire the function toggleWeatherForecast on click */}\r\n                <button onClick={this.props.weatherForecast}>Show Forecast</button>\r\n\r\n                {/* Div holding the forecast if the user wants */}\r\n                <div id=\"weatherForecast\">\r\n                    {\r\n                        this.props.forecastData.map((dayObj) => {\r\n                            return (\r\n                                <div className=\"forecastDayContainer\" key={dayObj.date_epoch}>\r\n                                    <h3>{dayObj.date}</h3>\r\n                                    <h4>{dayObj.day.condition.text}</h4>\r\n                                    <p>High: {dayObj.day.maxtemp_c}°C</p>\r\n                                    <p>Low: {dayObj.day.mintemp_c}°C</p>\r\n                                    <p>Precip: {dayObj.day.totalprecip_mm}mm</p>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n                \r\n            </div> \r\n        )\r\n    }\r\n}\r\nexport default WeatherData; ","// Header class component\r\nimport { Component } from 'react';\r\nimport './App.css';\r\n\r\nclass Header extends Component {\r\n    render() { \r\n        return (\r\n            <header>\r\n                <div className=\"wrapper headerFlexChild\">\r\n                    <h1>Check out some weather!</h1>\r\n                    {/* Header gets passed a function to scroll the user to the form when chevron down is clicked  */}\r\n                    <i onClick={() => { this.props.scrollFunc() }} className=\"fas fa-chevron-down chevron\"></i>\r\n                </div>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","// Header class component\r\nimport { Component } from 'react';\r\nimport './App.css';\r\n\r\nclass Footer extends Component {\r\n    render() {\r\n        return (\r\n            <footer>\r\n                <p>Copyright © Ben Sarjeant | Juno College </p>\r\n            </footer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Footer;","// General App Functionality Description\n// Loads current and forecasted weather based off users input (https://www.weatherapi.com/)\n// Changes background of results screen based off users input (https://unsplash.com/)\n// Ben Sarjeant | Juno College 2020\n\n// General Imports\nimport { Component, Fragment } from 'react';\nimport './App.js';\nimport './App.css';\n// NPM Installs\nimport firebase from './firebaseUsersLocation.js';\nimport axios from 'axios';\n// Class Components\nimport WeatherData from './WeatherData.js';\nimport Header from './Header.js';\nimport Footer from './Footer.js';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      locations: [],\n      currentWeatherData: [],\n      forecastWeatherData: [],\n      weatherLocation: '',\n      userInput: '',\n      weatherLocationBg: '', \n      currentConditionData: ''\n    }\n  }\n\n\n  // On mount load function that retrieves list of previously saved locations from firebase\n  componentDidMount() {\n    this.storeUserLocationFB();\n  }\n\n  handleInputChange = (e) => {\n    this.setState({\n      // converting user input to have a capitalized first letter\n      userInput: e.target.value.charAt(0).toUpperCase() + e.target.value.slice(1)\n    })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    // call both api requests based off of the user input received from the input change\n    this.callWeatherAPI(`${this.state.userInput}`);\n    this.callUnsplashImgAPI(`${this.state.userInput}`);\n  }\n\n\n  // Firebase: Function to retrieve list of previously entered locations from Firebase\n  storeUserLocationFB() {\n    const dbRef = firebase.database().ref()\n    dbRef.on('value', (data) => {\n      const firebaseDataObj = data.val();\n      let locationArray = [];\n      for (let propertyKey in firebaseDataObj) {\n        const propertyVal = firebaseDataObj[propertyKey];\n        const formattedObj = {\n          id: propertyKey,\n          name: propertyVal\n        }\n        locationArray.push(formattedObj)\n      }\n      this.setState({\n        locations: locationArray,\n      })\n    })\n  }\n  // End of Firebase function\n  \n\n  // WeatherAPI: Calling to retrieve weather data when user clicks submit button\n  // Function takes the city which is derieved from the users input above\n  // Throws error in console regardless of catch if user inputs random string (not a city)\n  callWeatherAPI = (city) => {\n    axios({\n      method: 'GET',\n      url: 'https://api.weatherapi.com/v1/forecast.json',\n      dataResponse: 'json',\n      params: {\n        key: '29c5ceb051fc45c29ac204434202611',\n        q: city,\n        days: 3\n      }\n    }).then((apiData) => {\n      this.filterWeatherData(apiData.data);    \n      document.getElementById('weatherDataContainer').style.display = 'flex';\n    }).catch(err => {\n      alert(\"No data for that city, please try again.\") \n    })\n  }\n\n  // Filtering weather data to add specific text to DOM and retrieved weather array\n  // Contains series of conditionals to add some text based off of retrieved weather values\n  filterWeatherData = (origWeatherData) => {\n\n    // variables used in setState at end of function\n    const forecastApiData = origWeatherData.forecast.forecastday;\n    const weatherLocationFullName = origWeatherData.location.name + ', ' + origWeatherData.location.country;\n    const currentCondition = origWeatherData.current.condition.text;\n    \n    // variables used in conditionals\n    // currentApiData holds all the relevant info\n    let currentApiData = origWeatherData.current;\n    let currentHumid = origWeatherData.current.humidity;\n    let currentWindSpeed = origWeatherData.current.wind_kph;\n    let currentPrecip = origWeatherData.current.precip_mm;\n\n    // conditionals for precipitation \n    if (currentPrecip >= 20) {\n      currentApiData = { ...currentApiData, precipText: \"Hurricane Rain\" };\n    } else if (currentPrecip < 20 & currentPrecip >= 10) {\n      currentApiData = { ...currentApiData, precipText: \"Pouring\" };\n    } else if (currentPrecip < 10 & currentPrecip >= 4) {\n      currentApiData = { ...currentApiData, precipText: \"Raining\" };\n    } else if (currentPrecip < 4 & currentPrecip >= 0.1) {\n      currentApiData = { ...currentApiData, precipText: \"Drizzling\" };\n    } else {\n      currentApiData = { ...currentApiData, precipText: \"No Rain\" }\n    }\n\n    //conditionals for wind speed\n    if (currentWindSpeed >= 60) {\n      currentApiData = { ...currentApiData, windText: \"Hurricane Winds\" };\n    } else if (currentWindSpeed < 60 & currentWindSpeed >= 30) {\n      currentApiData = { ...currentApiData, windText: \"Windy\" };\n    } else if (currentWindSpeed < 30 & currentWindSpeed >= 15) {\n      currentApiData = { ...currentApiData, windText: \"Breezy\" };\n    } else {\n      currentApiData = { ...currentApiData, windText: \"Little to no wind\" }\n    }\n\n    // conditionals for humidity\n    if (currentHumid >= 85) {\n      currentApiData = { ...currentApiData, humidText: \"Very humid\" };\n    } else if (currentHumid < 85 & currentHumid >= 50) {\n      currentApiData = { ...currentApiData, humidText: \"Humid\" };\n    } else if (currentHumid < 50 & currentHumid >= 15) {\n      currentApiData = { ...currentApiData, humidText: \"Not Very Humid\" };\n    } else {\n      currentApiData = { ...currentApiData, humidText: \"No Humidity\" }\n    }\n\n    // setting state to reflect updated weather obj\n    this.setState({\n      weatherLocation: weatherLocationFullName,\n      currentWeatherData: currentApiData,\n      currentConditionData: currentCondition,\n      forecastWeatherData: forecastApiData\n    });\n  }\n\n\n  // Calling the unsplash API to retrieve a background photo based off of the users requested location\n  callUnsplashImgAPI = (city) => {\n    const unsplashPhotoKey = 'ZxjN4qAJgh0cJ5Lz2Lm47cXNiqzVZVZ69KLm5386GtM';\n    axios({\n      method: 'GET',\n      url: 'https://api.unsplash.com/search/photos',\n      dataResponse: 'json',\n      params: {\n        client_id: unsplashPhotoKey,\n        query: city,\n        orientation: 'landscape'\n      }\n    }).then((apiData) => {\n      // setting the state of the weather location background to that of the url retrieved from api\n      this.setState({\n        weatherLocationBg: apiData.data.results[0].urls.regular\n      })\n      // setting the background image of the section holding all weather data based off of the state\n      document.getElementById('weatherSection').style.backgroundImage = `url(${this.state.weatherLocationBg})`;\n      \n    }).catch(err => {\n      // catching to ensure app won't break\n      // was logging the errors to console prior\n    })\n  }\n  // End of unsplash api call\n\n  \n  // Function to scroll down to the next section - called from chevron click in Header class component\n  scrollToWeather = () => {\n    this.weatherSection.scrollIntoView({ behavior: \"smooth\" });\n  }\n\n  // START of Firebase functions\n  // Function checks to see if value is already stored in database, if it is let user know otherwise store location\n  storeLocation = () => {\n    const dbRef = firebase.database().ref();\n    let locationTextArray = []\n    // iterating over locations (array holding current firebase items) and pushing the name, not the key to a new array\n    this.state.locations.forEach(element => {\n      locationTextArray.push(element.name)\n    });\n    // seeing if the user input exists in the new array\n    const indexOf = locationTextArray.indexOf(this.state.userInput);\n    if (indexOf >= 0) {\n      alert(\"This city is already a stored location!\")\n    } else {\n      dbRef.push(this.state.userInput)\n    }\n  }\n\n  // remove location when user selects the button marked with an X\n  removeLocation = (locId) => {\n    const dbRef = firebase.database().ref()\n    dbRef.child(locId).remove();\n  }\n\n  // load a stored location if user clicks on it - stored locations are shown as an <a> and fire this function on click\n  loadPreviousCity = (e) => {\n    e.preventDefault();\n    this.setState({\n      userInput: e.target.text\n    })\n    this.callWeatherAPI(e.target.text);\n    this.callUnsplashImgAPI(e.target.text);\n  }\n  // End of Firebase functions\n\n\n  // function to toggle the forecast \n  toggleWeatherForecast = (e) => {\n    if (e.target.textContent === \"Show Forecast\") {\n      document.getElementById('weatherForecast').style.display = 'flex';\n      e.target.textContent = \"Hide Forecast\"  \n    } else if (e.target.textContent === \"Hide Forecast\") {\n      document.getElementById('weatherForecast').style.display = 'none';\n      e.target.textContent = \"Show Forecast\"\n    }\n  }\n\n\n  render() { \n    return (\n      <Fragment>\n        <Header scrollFunc={this.scrollToWeather} />\n        \n        {/* Main section used to change background */}\n        <section\n          className=\"weatherMain\"\n          id=\"weatherSection\"\n          ref={(el) => { this.weatherSection = el; }}>\n\n          {/* Section containing all retrieved weather api info */}\n          <section className=\"requestedWeather\">\n\n            {/* Form for user input - handles api calls on submit */}\n            <form onSubmit={this.handleSubmit} className=\"weatherDataForm\">\n              <label htmlFor=\"userLocation\" className=\"srOnly\">location:</label>\n              <input\n                type=\"text\"\n                id=\"userLocation\"\n                name=\"userLocation\"\n                placeholder=\"Search for a city\"\n                onChange={this.handleInputChange}\n              />\n              <button>Find Weather</button>\n            </form>\n\n            {/* Firebase stored locations */}\n            <p>Stored Locations</p>\n            <div className=\"firebaseStoredLocations\">\n              {\n                this.state.locations.map((loc) => {\n                  return (\n                    <li key={loc.id}>\n                      {/* On <a> click fire api call based on selected tag */}\n                      <a href=\"#weatherSection\" onClick={this.loadPreviousCity}>{loc.name}</a>\n                      {/* Button to remove stored location from firebase */}\n                      <button className=\"removeButton\" onClick={() => { this.removeLocation(loc.id) }}>X</button>\n                    </li>\n                  )\n                })\n              }\n            </div>\n\n            {/* Weather Data class component */}\n            <WeatherData\n              weatherLoc={this.state.weatherLocation}\n              currentWeathCondition={this.state.currentConditionData}\n              currentWeath={this.state.currentWeatherData}\n              bgSrc={this.state.weatherLocationBg}\n              firebaseAddFunc={this.storeLocation}\n              weatherForecast={this.toggleWeatherForecast}\n              forecastData={this.state.forecastWeatherData}\n            />\n            \n          </section>\n          {/* END OF requestedWeather SECTION */}\n\n        </section>\n        {/* END OF weatherMain SECTION  */}\n      \n        <Footer />\n\n      </Fragment>     \n    )\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}