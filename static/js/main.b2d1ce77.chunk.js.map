{"version":3,"sources":["firebaseUsersLocation.js","WeatherData.js","WeatherBackground.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","WeatherData","this","props","location","temp","humidity","wind","precip","pressure","Component","WeatherBackground","bgSrc","className","style","backgroundImage","backgroundSize","backgroundPosition","height","App","scrollToWeather","weatherSection","scrollIntoView","behavior","handleInputChange","e","console","log","target","value","setState","userInput","handleSubmit","preventDefault","axios","method","url","dataResponse","params","client_id","query","state","orientation","then","apiData","data","results","urls","regular","weatherLocationBgSrc","weatherLocationBg","catch","err","key","q","currentApiData","current","weatherLocationFullName","name","country","currentWeather","weatherLocation","alert","locations","database","ref","on","firebaseDataObj","val","locationArray","propertyKey","formattedObj","id","push","onClick","el","onSubmit","htmlFor","type","placeholder","onChange","temp_c","wind_kph","precip_mm","pressure_in","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b2d1ce77.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/database\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAzgD0kXpjPIfhvWKOTTAPmM6nUKUH4tNI\",\r\n    authDomain: \"ben-sarjeant-project-5.firebaseapp.com\",\r\n    databaseURL: \"https://ben-sarjeant-project-5.firebaseio.com\",\r\n    projectId: \"ben-sarjeant-project-5\",\r\n    storageBucket: \"ben-sarjeant-project-5.appspot.com\",\r\n    messagingSenderId: \"294499551721\",\r\n    appId: \"1:294499551721:web:5cbbb09952bf2f8b72e378\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","import { Component } from 'react';\r\n\r\nclass WeatherData extends Component {\r\n    render() { \r\n        return (\r\n        <div>\r\n            <h2>{this.props.location}</h2>\r\n            <h2>Temperature: {this.props.temp}</h2>\r\n            <p>Humidity: {this.props.humidity}</p>\r\n            <p>Wind (kph): {this.props.wind}</p>\r\n            <p>Precipitation: {this.props.precip}</p>\r\n            <p>Pressure: {this.props.pressure}</p>\r\n        </div>\r\n        )\r\n    }\r\n}\r\nexport default WeatherData;","const WeatherBackground = ({ bgSrc }) => {\r\n    return (\r\n        <div \r\n            className=\"weatherBg\"\r\n            style={{\r\n                backgroundImage:`url(${bgSrc})`,\r\n                backgroundSize: 'cover',\r\n                backgroundPosition: 'center',\r\n                height: '40vh'\r\n            }}\r\n        >\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WeatherBackground;\r\n","import { Component, Fragment } from 'react';\nimport firebase from './firebaseUsersLocation.js';\nimport './App.js';\nimport axios from 'axios';\nimport WeatherData from './WeatherData.js';\nimport WeatherBackground from './WeatherBackground.js';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      locations: [],\n      currentWeather: [],\n      weatherLocation: '',\n      userInput: '',\n      weatherLocationBg: '' \n    }\n  }\n\n  componentDidMount() {\n    const dbRef = firebase.database().ref()\n    // get data from the database\n    dbRef.on('value', (data) => {\n      const firebaseDataObj = data.val();\n      console.log(firebaseDataObj);\n\n      let locationArray = [];\n\n      for (let propertyKey in firebaseDataObj) {\n        const propertyVal = firebaseDataObj[propertyKey];\n        const formattedObj = {\n          id: propertyKey,\n          name: propertyVal\n        }\n        locationArray.push(formattedObj)\n      }\n\n      console.log('locations:', locationArray)\n\n      this.setState({\n        locations: locationArray\n      })\n    })\n\n    \n  }\n  \n  scrollToWeather = () => {\n    this.weatherSection.scrollIntoView({behavior:\"smooth\"});\n  }\n\n  handleInputChange = (e) => {\n    console.log(e.target.value);\n    this.setState({\n      userInput: e.target.value\n    })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    axios({\n      method: 'GET',\n      url: 'https://api.unsplash.com/search/photos',\n      dataResponse: 'json',\n      params: {\n        client_id: 'ZxjN4qAJgh0cJ5Lz2Lm47cXNiqzVZVZ69KLm5386GtM',\n        query: `${this.state.userInput}`,\n        orientation: 'landscape'\n      }\n      \n    }).then((apiData) => {\n      console.log('unsplash data', apiData);\n      console.log('unsplash data', apiData.data.results[0].urls.regular);\n\n      const weatherLocationBgSrc = apiData.data.results[0].urls.regular\n      this.setState({\n        weatherLocationBg: weatherLocationBgSrc\n      })\n    }).catch(err => {\n      console.log(\"Sorry try again\");\n    })\n\n\n\n    axios({\n      method: 'GET',\n      url: 'http://api.weatherapi.com/v1/current.json',\n      dataResponse: 'json',\n      params: {\n        key: '29c5ceb051fc45c29ac204434202611',\n        q: `${this.state.userInput}`\n      }\n    }).then((apiData) => {\n      console.log(apiData);\n\n      const currentApiData = apiData.data.current;\n      const weatherLocationCity = apiData.data.location.name;\n      const weatherLocationCountry = apiData.data.location.country;\n      const weatherLocationFullName = weatherLocationCity + ', ' + weatherLocationCountry;\n\n      this.setState({\n        currentWeather: currentApiData,\n        weatherLocation: weatherLocationFullName\n      });\n    }).catch(err => {\n      alert(\"Sorry try again\")\n    })\n\n\n  }\n  \n  render() { \n    return (\n      <Fragment>\n        <header>\n          <div className=\"wrapper headerFlexChild\">\n            <h1>Welcome to a new weather experience!</h1>\n            <i onClick={() => { this.scrollToWeather() }} className=\"fas fa-chevron-down chevron\"></i>\n          </div>\n          <p>artwork by </p>\n        </header>\n\n        \n        <section className=\"weatherMain\" id=\"weatherSection\" ref={(el) => { this.weatherSection = el; }}>\n\n        <WeatherBackground \n            bgSrc= {this.state.weatherLocationBg}\n        />\n\n          {/* {\n          \n            this.state.locations.map((loc) => {\n              return (\n                <li key={loc.id}>\n                  <p>{loc.name}</p>\n                </li>\n      \n              )\n            })\n            \n          } */}\n\n          \n\n          <section className=\"requestedWeather\">\n            \n            <form onSubmit={this.handleSubmit}>\n              <label htmlFor=\"userLocation\" className=\"srOnly\">location:</label>\n              <input\n                type=\"text\"\n                id=\"userLocation\"\n                name=\"userLocation\"\n                placeholder=\"Find New City\"\n                onChange={this.handleInputChange}\n              />\n              <button>Find Weather</button>\n\n            </form>\n\n\n\n            <WeatherData\n              location={this.state.weatherLocation}\n              temp={this.state.currentWeather.temp_c}\n              humidity={this.state.currentWeather.humidity}\n              wind={this.state.currentWeather.wind_kph}\n              precip={this.state.currentWeather.precip_mm}\n              pressure={this.state.currentWeather.pressure_in}\n            />\n          </section>\n          \n        \n        </section>\n\n      </Fragment>  \n\n     \n    )\n  }\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}