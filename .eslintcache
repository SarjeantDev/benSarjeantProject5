[{"C:\\sites\\juno\\bootcamp\\projects\\project5\\ben-sarjeant-project-5\\src\\index.js":"1","C:\\sites\\juno\\bootcamp\\projects\\project5\\ben-sarjeant-project-5\\src\\reportWebVitals.js":"2","C:\\sites\\juno\\bootcamp\\projects\\project5\\ben-sarjeant-project-5\\src\\App.js":"3","C:\\sites\\juno\\bootcamp\\projects\\project5\\ben-sarjeant-project-5\\src\\firebaseUsersLocation.js":"4","C:\\sites\\juno\\bootcamp\\projects\\project5\\ben-sarjeant-project-5\\src\\WeatherData.js":"5","C:\\sites\\juno\\bootcamp\\projects\\project5\\ben-sarjeant-project-5\\src\\WeatherBackground.js":"6","C:\\sites\\juno\\bootcamp\\projects\\project5\\ben-sarjeant-project-5\\src\\Header.js":"7"},{"size":500,"mtime":499162500000,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"9"},{"size":8979,"mtime":1607043062137,"results":"11","hashOfConfig":"9"},{"size":546,"mtime":1606669021131,"results":"12","hashOfConfig":"9"},{"size":976,"mtime":1607042682671,"results":"13","hashOfConfig":"9"},{"size":405,"mtime":1607021878510,"results":"14","hashOfConfig":"9"},{"size":445,"mtime":1607020842712,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"w0kb75",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\sites\\juno\\bootcamp\\projects\\project5\\ben-sarjeant-project-5\\src\\index.js",[],"C:\\sites\\juno\\bootcamp\\projects\\project5\\ben-sarjeant-project-5\\src\\reportWebVitals.js",[],"C:\\sites\\juno\\bootcamp\\projects\\project5\\ben-sarjeant-project-5\\src\\App.js",["31","32","33","34"],"import { Component, Fragment } from 'react';\nimport firebase from './firebaseUsersLocation.js';\nimport './App.js';\nimport axios from 'axios';\nimport WeatherData from './WeatherData.js';\nimport Header from './Header.js'\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      locations: [],\n      currentWeatherData: [],\n      weatherLocation: '',\n      userInput: '',\n      weatherRange: '',\n      weatherLocationBg: '', \n      currentConditionData: ''\n    }\n  }\n\n//   MVP\n//   1. Landing page welcoming user to site -- done \n//   2. Prompt user for location of choice, and range of forecast\n// 3. Show weather related to that location from third - party api based off prompt(Weather API)\n\n// Stretch\n// 1. Allow users to save location for future use\n// 2. Allow users view satellite imagery\n// 3. Allow users to see weather on mars for same range of forecast(NASA API)\n\n  componentDidMount() {\n    this.storeUserLocationFB();\n  }\n\n  handleInputChange = (e) => {\n    this.setState({\n      // converting user input to have a capitalized first letter\n      userInput: e.target.value.charAt(0).toUpperCase() + e.target.value.slice(1),\n    })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.callWeatherAPI(`${this.state.userInput}`);\n    this.callUnsplashImgAPI(`${this.state.userInput}`);\n  }\n\n  // Function to retrieve list of previously entered locations from Firebase\n  storeUserLocationFB() {\n    const dbRef = firebase.database().ref()\n \n    dbRef.on('value', (data) => {\n      const firebaseDataObj = data.val();\n\n      let locationArray = [];\n\n      for (let propertyKey in firebaseDataObj) {\n        const propertyVal = firebaseDataObj[propertyKey];\n        const formattedObj = {\n          id: propertyKey,\n          name: propertyVal\n        }\n        locationArray.push(formattedObj)\n      }\n\n      this.setState({\n        locations: locationArray,\n      })\n    })\n  }\n  // End of Firebase function\n  \n  // Calling weather api to retrieve weather data when user submits button\n  callWeatherAPI = (city) => {\n    const weatherKey = '29c5ceb051fc45c29ac204434202611';\n\n    axios({\n      method: 'GET',\n      url: 'https://api.weatherapi.com/v1/current.json',\n      dataResponse: 'json',\n      params: {\n        key: weatherKey,\n        q: city\n      }\n    }).then((apiData) => {\n\n      this.filterWeatherData(apiData.data);    \n      document.getElementById('weatherDataContainer').style.display = 'flex';\n\n    }).catch(err => {\n      console.log(err);\n      alert(\"No data for that city, please try again.\") \n    })\n  }\n\n  // Filtering weather data to add specific text\n  filterWeatherData = (origWeatherData) => {\n    console.log(\"original weather data\", origWeatherData);\n    let currentApiData = origWeatherData.current;\n    const weatherLocationCity = origWeatherData.location.name;\n    const weatherLocationCountry = origWeatherData.location.country;\n    const weatherLocationFullName = weatherLocationCity + ', ' + weatherLocationCountry;\n    const currentCondition = origWeatherData.current.condition.text;\n\n    let currentHumid = origWeatherData.current.humidity;\n    let currentWindSpeed = origWeatherData.current.wind_kph;\n    // const currentWindGust = origWeatherData.current.temp_c;\n    let currentPrecip = origWeatherData.current.precip_mm;\n    let currentPressure = origWeatherData.current.pressure_in;\n\n    //conditionals for humidity\n    // if (currentHumid >= 60) {\n    //   currentApiData = { ...currentApiData, humidText: \"Very windy - stay inside or you'll turn into a kite\" };\n    // } else if (currentHumid < 60 & currentHumid >= 40) {\n    //   currentApiData = { ...currentApiData, humidText: \"Windy - enjoy the strong winds\" };\n    // } else if (currentHumid < 40 & currentHumid >= 15) {\n    //   currentApiData = { ...currentApiData, humidText: \"Breezy - the perfect amount of breeze\" };\n    // } else {\n    //   currentApiData = { ...currentApiData, humidText: \"No wind right now\" }\n    // }\n\n    \n    //conditionals for wind speed\n    if (currentWindSpeed >= 60) {\n       currentApiData = {...currentApiData, windText: \"Very windy - stay inside or you'll turn into a kite\"};\n    } else if (currentWindSpeed < 60 & currentWindSpeed >= 40) {\n      currentApiData = { ...currentApiData, windText: \"Windy - enjoy the strong winds\"};\n    } else if (currentWindSpeed < 40 & currentWindSpeed >= 15) {\n      currentApiData = { ...currentApiData, windText: \"Breezy - the perfect amount of breeze\" };\n    } else {\n      currentApiData = {...currentApiData, windText: \"Hardly any wind right now\"}\n    }\n\n\n    // conditionals for precipitation \n    if (currentPrecip >= 20) {\n      currentApiData = {...currentApiData, precipText: \"It's raining cats and dogs - stay inside or you'll drown\"};\n    } else if (currentPrecip < 20 & currentPrecip >= 10) {\n      currentApiData = { ...currentApiData, precipText: \"It's pouring - wear that rain coat you don't own\"};\n    } else if (currentPrecip < 10 & currentPrecip >= 4) {\n      currentApiData = { ...currentApiData, precipText: \"It's raining - better bundle up\" };\n    } else if (currentPrecip < 4 & currentPrecip >= 0.1) {\n      currentApiData = { ...currentApiData, precipText: \"It's drizzling - at least it's not pouring\" };\n    } else {\n      currentApiData = {...currentApiData, precipText: \"No rain right now\"}\n    }\n\n  \n\n\n    this.setState({\n      weatherLocation: weatherLocationFullName,\n      currentWeatherData: currentApiData,\n      currentConditionData: currentCondition\n    });\n       \n\n  }\n\n\n  // Calling the unsplash API to retrieve a background photo based off of the users requested location\n  callUnsplashImgAPI = (city) => {\n    const unsplashPhotoKey = 'ZxjN4qAJgh0cJ5Lz2Lm47cXNiqzVZVZ69KLm5386GtM';\n\n    axios({\n      method: 'GET',\n      url: 'https://api.unsplash.com/search/photos',\n      dataResponse: 'json',\n      params: {\n        client_id: unsplashPhotoKey,\n        query: city,\n        orientation: 'landscape'\n      }\n    }).then((apiData) => {\n      const weatherLocationBgSrc = apiData.data.results[0].urls.regular\n      this.setState({\n        weatherLocationBg: weatherLocationBgSrc\n      })\n      document.getElementById('weatherSection').style.backgroundImage = `url(${this.state.weatherLocationBg})`;\n      \n    }).catch(err => {\n      console.log(err);\n    })\n  }\n  // End of unsplash api call\n\n  \n  // Function to scroll down to the next section - called from chevron click\n  scrollToWeather = () => {\n    this.weatherSection.scrollIntoView({ behavior: \"smooth\" });\n  }\n\n  removeLocation = (locId) => {\n    const dbRef = firebase.database().ref()\n    dbRef.child(locId).remove();\n  }\n\n  storeLocation = () => {\n    const dbRef = firebase.database().ref();\n    let locationTextArray = []\n    this.state.locations.forEach(element => {\n      locationTextArray.push(element.name)\n    });\n    const indexOf = locationTextArray.indexOf(this.state.userInput);\n    const userInputCity = this.state.userInput\n    if (indexOf >= 0) {\n      alert(\"This city is already a stored location!\")\n    } else {\n      dbRef.push(this.state.userInput)\n    }\n  }\n\n  loadPreviousCity = (e) => {\n    e.preventDefault();\n    this.setState({\n      userInput: e.target.text\n    })\n    this.callWeatherAPI(e.target.text);\n    this.callUnsplashImgAPI(e.target.text);\n  }\n\n\n  render() { \n    return (\n      <Fragment>\n        <Header scrollFunc={this.scrollToWeather} />\n        <section\n          className=\"weatherMain\"\n          id=\"weatherSection\"\n          ref={(el) => { this.weatherSection = el; }}>\n\n          <section className=\"requestedWeather\">\n            <form onSubmit={this.handleSubmit} className=\"weatherDataForm\">\n              <label htmlFor=\"userLocation\" className=\"srOnly\">location:</label>\n              <input\n                type=\"text\"\n                id=\"userLocation\"\n                name=\"userLocation\"\n                placeholder=\"Search for a city\"\n                onChange={this.handleInputChange}\n              />\n              <button>Find Weather</button>\n               \n            </form>\n               \n\n            <WeatherData\n              weatherLoc={this.state.weatherLocation}\n              currentWeathCondition={this.state.currentConditionData}\n              currentWeath={this.state.currentWeatherData}\n              bgSrc={this.state.weatherLocationBg}\n              firebaseAddFunc={this.storeLocation}\n            />\n\n            <div className=\"firebaseStoredLocations\">  \n              {\n                this.state.locations.map((loc) => {\n                  return (\n                    <li key={loc.id}>\n                      <a href=\"\" onClick={this.loadPreviousCity}>{loc.name}</a>\n                      <button className=\"removeButton\" onClick={() => { this.removeLocation(loc.id) }}>X</button>\n                    </li>\n                  )\n                })\n              }\n            </div>\n\n          </section>\n        </section>\n      </Fragment>       \n    )\n  }\n}\n\nexport default App","C:\\sites\\juno\\bootcamp\\projects\\project5\\ben-sarjeant-project-5\\src\\firebaseUsersLocation.js",[],"C:\\sites\\juno\\bootcamp\\projects\\project5\\ben-sarjeant-project-5\\src\\WeatherData.js",[],"C:\\sites\\juno\\bootcamp\\projects\\project5\\ben-sarjeant-project-5\\src\\WeatherBackground.js",[],"C:\\sites\\juno\\bootcamp\\projects\\project5\\ben-sarjeant-project-5\\src\\Header.js",[],{"ruleId":"35","severity":1,"message":"36","line":106,"column":9,"nodeType":"37","messageId":"38","endLine":106,"endColumn":21},{"ruleId":"35","severity":1,"message":"39","line":110,"column":9,"nodeType":"37","messageId":"38","endLine":110,"endColumn":24},{"ruleId":"35","severity":1,"message":"40","line":206,"column":11,"nodeType":"37","messageId":"38","endLine":206,"endColumn":24},{"ruleId":"41","severity":1,"message":"42","line":261,"column":23,"nodeType":"43","endLine":261,"endColumn":66},"no-unused-vars","'currentHumid' is assigned a value but never used.","Identifier","unusedVar","'currentPressure' is assigned a value but never used.","'userInputCity' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement"]